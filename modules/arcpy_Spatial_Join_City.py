# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Spatial Join City.py
# Created on: 2018-10-20 13:44:58.00000
#   (generated by ArcGIS/ModelBuilder)
# Description:
# THIS SCRIPT IS FOR THE TESTING ENVIRONMENT ONLY
# ---------------------------------------------------------------------------

# Check initial config
from configparser import ConfigParser
config = ConfigParser()
config.read(r'C:\Users\Panji\Documents\Python Scripts\Non-Jupyter Py Scripts\MMDA Tweet2Map\Environments - Testing\config.ini')
config.read('config.ini')

if config.getboolean('settings', 'parser_error') == True:
    # If there is an error generated in the main script it will set
    # parser_error to True and stop the ArcPy script from running
    print('Error Detected! Terminating script.')
    try:
        program_exit = str(input('Press ENTER to close'))
    except:
        exit()
    exit()

if config.getboolean('settings', 'arcpy_module_installed') == False:
    print('arcpy_module_installed set to False')
    try:
        str(input('Press ENTER to close'))
        exit()
    except:
        exit()
    exit()

if config.getboolean('settings', 'arcpy_run') == False:
    try:
        str(input('Press ENTER to close'))
        exit()
    except:
        exit()
    exit()

print('Initializing ArcPy script...')

# Import arcpy module
try:
    import arcpy
except:
    print('Warning! ArcPy not detected!')
    print('Setting run_arcpy to FALSE in config.ini. You can modify this when you install ArcPy later')
    parser = ConfigParser()
    parser.read('config.ini')
    parser.set('settings', 'arcpy_module_installed', 'False')
    with open(self.file, 'w') as f:
        parser.write(f)
    print('Analysis done.')
    try:
        program_exit = str(input('Press ENTER to close'))
        exit()
    except:
        exit()

# Local variables:
data_all_csv = "C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_mmda_traffic_alerts.csv"
data_all = data_all_csv
data_all_dbf = r'C:\GIS\Data Files\Work Files\MMDA Tweet2Map\output\output.gdb\data_all'
output_gdb = "C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\output\\output.gdb"
data_all_Layer = "data_all_Layer"
boundary_ncr_shp = "C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\boundary\\boundary_ncr.shp"
data_all_join = "C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\output\\output.gdb\\data_all_join"
data_all_join__2_ = data_all_join
data_all_join__3_ = data_all_join__2_
data_all_csv__2_ = "C:\\Users\\Panji\\Documents\\Python Scripts\\Non-Jupyter Py Scripts\\MMDA Tweet2Map\\data_all.csv"
Delete_succeeded = "true"
Delete_succeeded__2_ = "true"
spRef = arcpy.SpatialReference("C:\GIS\Data Files\Work Files\MMDA Tweet2Map\input\GCS_WGS_1984.prj")

# Process: Set workspace environment
print('Set workspace environment')
arcpy.env.workspace = r'C:\GIS\Data Files\Work Files\MMDA Tweet2Map'
print('Set output coordinate system')
arcpy.env.outputCoordinateSystem = spRef
arcpy.env.overwriteOutput = True

# Process: Table to Table
try:
    print('Table to Table')
    arcpy.TableToTable_conversion(data_all_csv, output_gdb, "data_all", "", "Date \"Date\" true true false 8 Date 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Date,-1,-1;Time \"Time\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Time,-1,-1;Location \"Location\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Location,-1,-1;Latitude \"Latitude\" true true false 8000 Double 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Latitude,-1,-1;Longitude \"Longitude\" true true false 8000 Double 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Longitude,-1,-1;Direction \"Direction\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Direction,-1,-1;Type \"Type\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Type,-1,-1;Lanes_Blocked \"Lanes Blocked\" true true false 4 Long 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Lanes Blocked,-1,-1;Involved \"Involved\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Involved,-1,-1;Tweet \"Tweet\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Tweet,-1,-1;Source \"Source\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Source,-1,-1", "")
except:
    print('Table to Table - Rewriting existing .dbf file')
    arcpy.Delete_management(data_all_dbf, "")
    arcpy.TableToTable_conversion(data_all_csv, output_gdb, "data_all", "", "Date \"Date\" true true false 8 Date 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Date,-1,-1;Time \"Time\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Time,-1,-1;Location \"Location\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Location,-1,-1;Latitude \"Latitude\" true true false 8000 Double 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Latitude,-1,-1;Longitude \"Longitude\" true true false 8000 Double 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Longitude,-1,-1;Direction \"Direction\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Direction,-1,-1;Type \"Type\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Type,-1,-1;Lanes_Blocked \"Lanes Blocked\" true true false 4 Long 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Lanes Blocked,-1,-1;Involved \"Involved\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Involved,-1,-1;Tweet \"Tweet\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Tweet,-1,-1;Source \"Source\" true true false 8000 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\input\\data_all.csv,Source,-1,-1", "")

# Process: Make XY Event Layer
print('Make XY Event Layer')
arcpy.MakeXYEventLayer_management(data_all_dbf, "Longitude", "Latitude", data_all_Layer, spRef)

# Process: Spatial Join
try:
    print('Spatial Join')
    arcpy.SpatialJoin_analysis(data_all_Layer, boundary_ncr_shp, data_all_join, "JOIN_ONE_TO_ONE", "KEEP_ALL", "Date \"Date\" true true false 8 Date 0 0 ,First,#,data_all_Layer,Date,-1,-1;Time \"Time\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Time,-1,-1;Location \"Location\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Location,-1,-1;NAME_2 \"NAME_2\" true true false 80 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\boundary\\boundary_ncr.shp,NAME_2,-1,-1;Latitude \"Latitude\" true true false 8000 Double 0 0 ,First,#,data_all_Layer,Latitude,-1,-1;Longitude \"Longitude\" true true false 8000 Double 0 0 ,First,#,data_all_Layer,Longitude,-1,-1;Direction \"Direction\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Direction,-1,-1;Type \"Type\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Type,-1,-1;Lanes_Bloc \"Lanes Blocked\" true true false 4 Long 0 0 ,First,#,data_all_Layer,Lanes_Blocked,-1,-1;Involved \"Involved\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Involved,-1,-1;Tweet \"Tweet\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Tweet,-1,-1;Source \"Source\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Source,-1,-1", "INTERSECT", "", "")
except arcpy.ExecuteError:
    print('Spatial Join - Rewriting existing .shp file')
    arcpy.Delete_management(data_all_join, "")
    arcpy.SpatialJoin_analysis(data_all_Layer, boundary_ncr_shp, data_all_join, "JOIN_ONE_TO_ONE", "KEEP_ALL", "Date \"Date\" true true false 8 Date 0 0 ,First,#,data_all_Layer,Date,-1,-1;Time \"Time\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Time,-1,-1;Location \"Location\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Location,-1,-1;NAME_2 \"NAME_2\" true true false 80 Text 0 0 ,First,#,C:\\GIS\\Data Files\\Work Files\\MMDA Tweet2Map\\boundary\\boundary_ncr.shp,NAME_2,-1,-1;Latitude \"Latitude\" true true false 8000 Double 0 0 ,First,#,data_all_Layer,Latitude,-1,-1;Longitude \"Longitude\" true true false 8000 Double 0 0 ,First,#,data_all_Layer,Longitude,-1,-1;Direction \"Direction\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Direction,-1,-1;Type \"Type\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Type,-1,-1;Lanes_Bloc \"Lanes Blocked\" true true false 4 Long 0 0 ,First,#,data_all_Layer,Lanes_Blocked,-1,-1;Involved \"Involved\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Involved,-1,-1;Tweet \"Tweet\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Tweet,-1,-1;Source \"Source\" true true false 8000 Text 0 0 ,First,#,data_all_Layer,Source,-1,-1", "INTERSECT", "", "")

# Process: Alter Field
print('Alter Field')
arcpy.AlterField_management(data_all_join, "NAME_2", "City",
                            "City", "", "", "NON_NULLABLE", "false")

# Process: Delete Field
print('Delete Field')
arcpy.DeleteField_management(data_all_join__2_, "Join_Count;TARGET_FID")

# Process: Import custom toolbox
# TableToCSV
print('Import custom toolbox')
arcpy.ImportToolbox(
    r'C:\Program Files (x86)\ArcGIS\Desktop10.6\ArcToolbox\Toolboxes\Excel and CSV Conversion Tools.tbx')

# Process: TableToCSV
try:
    arcpy.TableToCSV_tableconversion(data_all_join__3_, data_all_csv__2_, "COMMA")
except arcpy.ExecuteError:
    print('TableToCSV - Rewriting existing .csv file')
    arcpy.Delete_management(
        r'C:\Users\Panji\Documents\Python Scripts\Non-Jupyter Py Scripts\MMDA Tweet2Map\data_all.csv', "")
    arcpy.TableToCSV_tableconversion(data_all_join__3_, data_all_csv__2_, "COMMA")
    # print(arcpy.GetMessages(2))

# Process: Delete
print('Delete database .dbf file')
arcpy.Delete_management(data_all, "")

# Process: Delete (2)
print('Delete XY Event Layer')
arcpy.Delete_management(data_all_Layer, "")

print('')
print('Analysis done')
try:
    program_exit = str(input('Press ENTER to close'))
except:
    exit()
exit()
