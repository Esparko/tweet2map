import argparse
from configparser import ConfigParser
from src.ArgparseProcessing import argparse_processing, argparse_generate_flags
from main import Tweet2Map
import pytest

###############################
# TEST ARGS
###############################

test_args_valid = [
    '-csv_out_path', 'tests\\test_data\\test_csv.csv',
    '-consumer_key', 'ConsumerKey1234',
    '-consumer_secret', 'ConsumerSecret5678',
    '-access_token', 'AccessToken1234',
    '-access_secret', 'AccessSecret5678',
    '-inc_database_path', 'tests\\test_data\\data.sqlite',
    '-shp_path', 'tests\\test_data\\boundary_ncr.shp',
    '-loc_database_path', 'tests\\test_data\\locations.sqlite',
    '-p'
]
expected_args_valid = {
    'csv_out_path': 'tests\\test_data\\test_csv.csv',
    'consumer_key': 'ConsumerKey1234',
    'consumer_secret': 'ConsumerSecret5678',
    'access_token': 'AccessToken1234',
    'access_secret': 'AccessSecret5678',
    'inc_database_path': 'tests\\test_data\\data.sqlite',
    'shp_path': 'tests\\test_data\\boundary_ncr.shp',
    'loc_database_path': 'tests\\test_data\\locations.sqlite',
    'p': True
    }

test_args_invalid = [
    '-csv_out_path', 'tests\\test_data\\test_csv.csv',
    '-consumer_key_fail', 'ConsumerKey1234',
    '-consumer_secret_fail', 'ConsumerSecret5678',
    '-access_token_fail', 'AccessToken1234',
    '-access_secret', 'AccessSecret5678',
    '-inc_database_path', 'tests\\test_data\\data.sqlite',
    '-shp_path', 'tests\\test_data\\boundary_ncr.shp',
    '-loc_database_path', 'tests\\test_data\\locations.sqlite',
    '-p'
]
expected_args_invalid = {
    'csv_out_path': 'tests\\test_data\\test_csv.csv',
    'consumer_key_fail': 'ConsumerKey1234',
    'consumer_secret_fail': 'ConsumerSecret5678',
    'access_token_fail': 'AccessToken1234',
    'access_secret': 'AccessSecret5678',
    'inc_database_path': 'tests\\test_data\\data.sqlite',
    'shp_path': 'tests\\test_data\\boundary_ncr.shp',
    'loc_database_path': 'tests\\test_data\\locations.sqlite',
    'p': True
    }

###############################
# TESTS
###############################

def test_argparse_flag():
    """
    Test CLI flags are valid
    """
    
    test_flags = [
        'csv_out_path',
        'p',
        'consumer_key',
        'consumer_secret',
        'access_token',
        'access_secret',
        'inc_database_path',
        'shp_path',
        'loc_database_path'
    ]

    parser = argparse.ArgumentParser(description='Tweet2Map Testing')
    parser = argparse_generate_flags(parser)
    args = parser.parse_args(test_args_valid)
    args = vars(args)
    parser_flags = args.keys()
    
    # Run asserts
    for flag in test_flags:
        message = f'Flag "{flag}" not part of flags generated by argparse_generate_flags'
        assert flag in parser_flags, message

def test_argparse_processing():
    """
    Test CLI processing
    """
    
    # Assert with valid arguments
    parser = argparse.ArgumentParser(description='Tweet2Map Testing')
    parser = argparse_generate_flags(parser)
    args = parser.parse_args(test_args_valid)
    args = vars(args)
    for k,v in args.items():
        print('Asserting... Key: {k}, Value: {v}')
        message = f'Actual {args} does not match {expected_args_valid}'
        assert expected_args_valid[k] == args[k], message